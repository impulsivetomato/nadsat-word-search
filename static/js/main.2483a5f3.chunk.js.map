{"version":3,"sources":["types.ts","utils.ts","state/appReducer.ts","components/Results/Results.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","matchesWord","source","target","toLowerCase","includes","initAppState","loading","entries","results","value","appReducer","state","action","type","toggleLoading","setEntries","payload","setResults","setValue","Results","Table","celled","Body","map","english","nadsat","origin","Row","key","Cell","App","useReducer","dispatch","useEffect","a","axios","get","then","res","data","fetchEntries","handleChange","e","filteredResults","filter","Form","Input","icon","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iLAaYA,E,uGCbCC,EAAc,SAACC,EAAgBC,GAC1C,OAAOD,EAAOE,cAAcC,SAASF,EAAOC,iB,SDYlCJ,K,+BAAAA,E,yBAAAA,E,yBAAAA,E,sBAAAA,M,iBEXCM,EAAsB,CACjCC,SAAS,EACTC,QAAS,GACTC,QAAS,GACTC,MAAO,IAGIC,EAAa,SAACC,EAAcC,GACvC,OAAQA,EAAOC,MACb,KAAKd,EAAYe,cACf,OAAO,eAAKH,EAAZ,CAAmBL,SAAUK,EAAML,UACrC,KAAKP,EAAYgB,WACf,OAAO,eAAKJ,EAAZ,CAAmBJ,QAASK,EAAOI,UACrC,KAAKjB,EAAYkB,WACf,OAAO,eAAKN,EAAZ,CAAmBH,QAASI,EAAOI,UACrC,KAAKjB,EAAYmB,SACf,OAAO,eAAKP,EAAZ,CAAmBF,MAAOG,EAAOI,UACnC,QACE,OAAOL,I,SCMEQ,EAhBkB,SAAC,GAAiB,IAAfX,EAAc,EAAdA,QAClC,OACE,kBAACY,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAME,KAAP,KACGd,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAQC,EAApB,EAAoBA,OAApB,OACX,kBAACN,EAAA,EAAMO,IAAP,CAAWC,IAAKJ,EAAUC,GACxB,kBAACL,EAAA,EAAMS,KAAP,KAAaL,GACb,kBAACJ,EAAA,EAAMS,KAAP,KAAaJ,GACb,kBAACL,EAAA,EAAMS,KAAP,KAAaH,UC0CVI,G,OAjDH,WAAO,IAAD,EACUC,qBAAWrB,EAAYL,GADjC,mBACTM,EADS,KACFqB,EADE,KAER1B,EAAqCK,EAArCL,QAASC,EAA4BI,EAA5BJ,QAASE,EAAmBE,EAAnBF,MAAOD,EAAYG,EAAZH,QAEjCyB,qBAAU,YACU,uCAAG,sBAAAC,EAAA,sDACnBF,EAAS,CAAEnB,KAAMd,EAAYe,gBAE7BqB,IAAMC,IAAI,eAAeC,MAAK,SAAAC,GAC5BN,EAAS,CAAEnB,KAAMd,EAAYgB,WAAYC,QAASsB,EAAIC,KAAKhC,UAC3DyB,EAAS,CAAEnB,KAAMd,EAAYkB,WAAYD,QAASsB,EAAIC,KAAKhC,UAC3DyB,EAAS,CAAEnB,KAAMd,EAAYe,mBANZ,2CAAH,qDAUlB0B,KACC,IAEH,IAAMC,EAAY,uCAAG,WACnBC,EADmB,oBAAAR,EAAA,sDAEjBzB,EAFiB,EAEjBA,MAEFuB,EAAS,CAAEnB,KAAMd,EAAYe,gBAEvB6B,EAAkBpC,EAAQqC,QAAO,YAAiC,IAA9BpB,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OACjD,OAAOzB,EAAYwB,EAASf,IAAUT,EAAYyB,EAAQhB,MAG5DuB,EAAS,CAAEnB,KAAMd,EAAYkB,WAAYD,QAAS2B,IAClDX,EAAS,CAAEnB,KAAMd,EAAYmB,SAAUF,QAASP,IAChDuB,EAAS,CAAEnB,KAAMd,EAAYe,gBAZV,2CAAH,wDAelB,OACE,oCACE,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLC,YAAY,YACZC,SAAUR,EACVnC,QAASA,EACTG,MAAOA,KAGX,kBAAC,EAAD,CAASD,QAASA,OC3CJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2483a5f3.chunk.js","sourcesContent":["export interface Entry {\n  nadsat: string;\n  english: string;\n  origin: string;\n}\n\nexport interface State {\n  loading: boolean;\n  results: Entry[];\n  entries: Entry[];\n  value?: string;\n}\n\nexport enum ActionTypes {\n  toggleLoading = 'TOGGLE_LOADING',\n  setEntries = 'SET_ENTRIES',\n  setResults = 'SET_RESULTS',\n  setValue = 'SET_VALUE'\n}\n\nexport type Action =\n  | { type: ActionTypes.toggleLoading }\n  | { type: ActionTypes.setEntries; payload: Entry[] }\n  | { type: ActionTypes.setResults; payload: Entry[] }\n  | { type: ActionTypes.setValue; payload?: string };\n","export const matchesWord = (source: string, target: string): boolean => {\n  return source.toLowerCase().includes(target.toLowerCase());\n};\n","import { State, ActionTypes, Action } from '../types';\n\nexport const initAppState: State = {\n  loading: false,\n  entries: [],\n  results: [],\n  value: ''\n};\n\nexport const appReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.toggleLoading:\n      return { ...state, loading: !state.loading };\n    case ActionTypes.setEntries:\n      return { ...state, entries: action.payload };\n    case ActionTypes.setResults:\n      return { ...state, results: action.payload };\n    case ActionTypes.setValue:\n      return { ...state, value: action.payload };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nimport { Entry } from '../../types';\n\nimport { Table } from 'semantic-ui-react';\n\ninterface Props {\n  results: Entry[];\n}\n\nconst Results: React.FC<Props> = ({ results }) => {\n  return (\n    <Table celled>\n      <Table.Body>\n        {results.map(({ english, nadsat, origin }: Entry) => (\n          <Table.Row key={english + nadsat}>\n            <Table.Cell>{english}</Table.Cell>\n            <Table.Cell>{nadsat}</Table.Cell>\n            <Table.Cell>{origin}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Results;\n","import React, { useReducer, useEffect } from 'react';\nimport { Input, InputOnChangeData, Form } from 'semantic-ui-react';\nimport axios from 'axios';\n\nimport { matchesWord } from '../../utils';\nimport { ActionTypes, Entry } from '../../types';\nimport { appReducer, initAppState } from '../../state/appReducer';\nimport Results from '../Results/Results';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(appReducer, initAppState);\n  const { loading, entries, value, results } = state;\n\n  useEffect(() => {\n    const fetchEntries = async () => {\n      dispatch({ type: ActionTypes.toggleLoading });\n\n      axios.get('./data.json').then(res => {\n        dispatch({ type: ActionTypes.setEntries, payload: res.data.entries });\n        dispatch({ type: ActionTypes.setResults, payload: res.data.entries });\n        dispatch({ type: ActionTypes.toggleLoading });\n      });\n    };\n\n    fetchEntries();\n  }, []);\n\n  const handleChange = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    { value }: InputOnChangeData\n  ): Promise<void> => {\n    dispatch({ type: ActionTypes.toggleLoading });\n\n    const filteredResults = entries.filter(({ english, nadsat }: Entry) => {\n      return matchesWord(english, value) || matchesWord(nadsat, value);\n    });\n\n    dispatch({ type: ActionTypes.setResults, payload: filteredResults });\n    dispatch({ type: ActionTypes.setValue, payload: value });\n    dispatch({ type: ActionTypes.toggleLoading });\n  };\n\n  return (\n    <>\n      <Form>\n        <Input\n          icon=\"search\"\n          placeholder=\"Search...\"\n          onChange={handleChange}\n          loading={loading}\n          value={value}\n        />\n      </Form>\n      <Results results={results} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}